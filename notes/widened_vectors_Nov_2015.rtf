{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14480\viewh21100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Lines from:\
  p-1 to p0\
  p1 to p0\
  p1 to p2\
\
Need:\
  Intersection between p0 to p1 AND p1 to p2 as a function of width/2\
  p1 -> p0\
  p1 -> p2\
\
Inputs:\
  p0, p1, p2  Points                            Known\
  n0, n1        Directions to widen        Known\
  w2              Width/2                         Unknown\
\
Outputs:\
  t0, t1         Parameter along lines for intersection\
\
Questions:\
  Where is t0 > 0.0\
  Where is t1 > 1.0\
\
Full equation for intersection:\
(p0-p1)*t0 + p1 + n0*w2 = (p2-p1)*t1 + p1 + n1*w2\
\
(p0-p1)*t0 + n0*w2 = (p2-p1)*t1 + n1*w2\
\
Solving for t1:\
(p0.x-p1.x)*t0 + n0.x*w2 = (p2.x-p1.x)*t1 + n1.x*w2\
(p0.x-p1.x)*t0 + n0.y*w2 = (p2.y-p1.y)*t1 + n1.y*w2\
\
t0 = [(p2.x-p1.x)*t1 + (n1.x-n0.x)*w2]/(p0.x-p1.x)\
t0 = [(p2.y-p1.y)*t1 + (n1.y-n0.y)*w2]/(p0.y-p1.y)\
\
p21 := p2 - p1\
p01 := p0 - p1\
n10 := n1 - n0\
\
t0 = [p21.x*t1 + n10.x*w2]/p01.x\
t0 = [p21.y*t1 + n10.y*w2]/p01.y\
\
(p21.x*t1 + n10.x*w2)/p01.x = (p21.y*t1 + n10.y*w2)/p01.y\
p21.x*t1 + n10.x*w2 = (p21.y*t1 + n10.y*w2) * p01.x/p01.y\
p21.x*t1 + n10.x*w2 = (p21.y*p01.x/p01.y)*t1 + (n10.y*p01.x/p01.y)*w2\
(p21.x-p21.y*p01.x/p01.y)*t1 = (n10.y*p01.x/p01.y - n10.x)*w2\
t1 = [(n10.y*p01.x/p01.y - n10.x)/(p21.x-p21.y*p01.x/p01.y)]*w2\
\
d0 := [(n10.y*p01.x/p01.y - n10.x)/(p21.x-p21.y*p01.x/p01.y)]\
d0 = [(n10.y*p01.x/p01.y - n10.x)/(p21.x-p21.y*p01.x/p01.y)] * p01.y/p01.y\
d0 = [n10.y*p01.x - n10.x*p01.y]/[(p21.x*p01.y-p21.y*p01.x)\
\
t1 = d0 * w2;\
iPt = p21*t1 + n1*w2 + p1\
\
Solving for t0:\
(p0.x-p1.x)*t0 + n0.x*w2 = (p2.x-p1.x)*t1 + n1.x*w2\
(p0.y-p1.y)*t0 + n0.y*w2 = (p2.y-p1.y)*t1 + n1.y*w2\
\
t1 = [(p0.x-p1.x)*t0 + (n0.x-n1.x)*w2]/(p2.x-p1.x)\
t1 = [(p0.y-p1.y)*t0 + (n0.y-n1.y)*w2]/(p2.y-p1.y)\
\
p01 := p1 - p0\
n01 := n0 - n1\
p21 := p2 - p1\
\
t1 = [p01.x*t0 + n01.x*w2]/p21.x\
t1 = [p01.y*t0 + n01.y*w2]/p21.y\
\
(p01.x*t0 + n01.x*w2)/p21.x = (p01.y*t0 + n01.y*w2)/p21.y\
p01.x*t0 + n01.x*w2 = (p01.y*t0 + n01.y*w2) * p21.x/p21.y\
p01.x*t0 + n01.x*w2 = (p01.y*p21.x/p21.y)*t0 + (n01.y/p21.y*p21.x)*w2\
\
[p01.x - (p01.y*p21.x/p21.y)]*t0 = [(n01.y/p21.y*p21.x) - n01.x]*w2\
t0 =  [(n01.y/p21.y*p21.x) - n01.x]/[p01.x - (p01.y*p21.x/p21.y)] * w2\
\
iPt0 is the Intersection point between p0->p1 and p1->p2\
iPt0 = (p0-p1)*t0 + n0 * w2 + p1\
\
c0 :=  [(n01.y/p21.y*p21.x) - n01.x]/[p01.x - (p01.y*p21.x/p21.y)] \
t0 = c0 * w2\
\
\{Variant of c0 calculation\}\
  c0 :=  [(n01.y/p21.y*p21.x) - n01.x]/[p01.x - (p01.y*p21.x/p21.y)]  * p21.y / p21.y\
  c0 :=  [n01.y*p21.x - n01.x*p21.y]/[p21.y*p01.x - p01.y*p21.x]\
\
iPt0 = p01*\{[(n01.y/p21.y*p21.x) - n01.x]/[p01.x - (p01.y*p21.x/p21.y)] + n0\}*w2\
((Note: Too far for shader)\
\
t0 = c0 * w2\
iPt = p01*t0 + n0*w2 + p1\
\
Inputs to shader:\
  p01      (2)\
  t0 limit  (2)\
  n0        (2)\
  c0        (1)\
  w2 (global) \
\
Equation for shader:\
  t0 = c0 * w2\
  t0 = min(10,t0 limit)\
  iPt = p01*t0 + n0*w2 + p1\
\
Figure out the limits of t0:\
  First limit:  t0 = 1.0  This works for end caps\
  Second limit:  Where t1 = 1.0\
  Third limit: Where p0->pm1 intersects p0->p1\
  Fourth limit: \
\
Find the maximum point where t0 will start to intersect \
}